import{A as F,U as i,S as y,a as T,f as r,c as S,m as L}from"./MP3Dashboard-ce14d317.js";class l{static fromBase64(t){return l.fromBuffer(Uint8Array.from(atob(t),e=>e.charCodeAt(0)))}static fromBuffer(t){return new l(t.length).get(t,0)}constructor(t){this.len=t}get(t,e){const a=F[i.get(t,e)];e+=4;const s=i.get(t,e);e+=4;const c=new y(s,"utf-8").get(t,e);e+=s;const m=i.get(t,e);e+=4;const h=new y(m,"utf-8").get(t,e);e+=m;const d=i.get(t,e);e+=4;const p=i.get(t,e);e+=4;const U=i.get(t,e);e+=4;const P=i.get(t,e);e+=4;const b=i.get(t,e);e+=4;const C=Uint8Array.from(t.slice(e,e+b));return{type:a,format:c,description:h,width:d,height:p,colour_depth:U,indexed_color:P,data:C}}}const g={len:7,get:(n,t)=>({packetType:T.get(n,t),vorbis:new y(6,"ascii").get(n,t+1)})},k={len:23,get:(n,t)=>({version:r.get(n,t+0),channelMode:T.get(n,t+4),sampleRate:r.get(n,t+5),bitrateMax:r.get(n,t+9),bitrateNominal:r.get(n,t+13),bitrateMin:r.get(n,t+17)})};class v{constructor(t,e){this.data=t,this.offset=e}readInt32(){const t=r.get(this.data,this.offset);return this.offset+=4,t}readStringUtf8(){const t=this.readInt32(),e=new TextDecoder("utf-8").decode(this.data.subarray(this.offset,this.offset+t));return this.offset+=t,e}parseUserComment(){const t=this.offset,e=this.readStringUtf8(),a=e.indexOf("=");return{key:e.slice(0,a).toUpperCase(),value:e.slice(a+1),len:this.offset-t}}}const o=S("music-metadata:parser:ogg:vorbis1");class u extends L("Vorbis"){}class w{constructor(t,e){this.metadata=t,this.options=e,this.pageSegments=[]}async parsePage(t,e){if(t.headerType.firstPage)this.parseFirstPage(t,e);else{if(t.headerType.continued){if(this.pageSegments.length===0)throw new u("Cannot continue on previous page");this.pageSegments.push(e)}if(t.headerType.lastPage||!t.headerType.continued){if(this.pageSegments.length>0){const a=w.mergeUint8Arrays(this.pageSegments);await this.parseFullPage(a)}this.pageSegments=t.headerType.lastPage?[]:[e]}}t.headerType.lastPage&&this.calculateDuration(t)}static mergeUint8Arrays(t){const e=t.reduce((s,c)=>s+c.length,0),a=new Uint8Array(e);return t.forEach((s,c,m)=>{const h=m.slice(0,c).reduce((d,p)=>d+p.length,0);a.set(s,h)}),a}async flush(){await this.parseFullPage(w.mergeUint8Arrays(this.pageSegments))}async parseUserComment(t,e){const s=new v(t,e).parseUserComment();return await this.addTag(s.key,s.value),s.len}async addTag(t,e){if(t==="METADATA_BLOCK_PICTURE"&&typeof e=="string"){if(this.options.skipCovers){o("Ignore picture");return}e=l.fromBase64(e),o(`Push picture: id=${t}, format=${e.format}`)}else o(`Push tag: id=${t}, value=${e}`);await this.metadata.addTag("vorbis",t,e)}calculateDuration(t){this.metadata.format.sampleRate&&t.absoluteGranulePosition>=0&&(this.metadata.setFormat("numberOfSamples",t.absoluteGranulePosition),this.metadata.setFormat("duration",t.absoluteGranulePosition/this.metadata.format.sampleRate))}parseFirstPage(t,e){this.metadata.setFormat("codec","Vorbis I"),o("Parse first page");const a=g.get(e,0);if(a.vorbis!=="vorbis")throw new u("Metadata does not look like Vorbis");if(a.packetType===1){const s=k.get(e,g.len);this.metadata.setFormat("sampleRate",s.sampleRate),this.metadata.setFormat("bitrate",s.bitrateNominal),this.metadata.setFormat("numberOfChannels",s.channelMode),o("sample-rate=%s[hz], bitrate=%s[b/s], channel-mode=%s",s.sampleRate,s.bitrateNominal,s.channelMode)}else throw new u("First Ogg page should be type 1: the identification header")}async parseFullPage(t){const e=g.get(t,0);switch(o("Parse full page: type=%s, byteLength=%s",e.packetType,t.byteLength),e.packetType){case 3:return this.parseUserCommentList(t,g.len)}}async parseUserCommentList(t,e){const a=r.get(t,e);e+=4,e+=a;let s=r.get(t,e);for(e+=4;s-- >0;)e+=await this.parseUserComment(t,e)}}export{w as V,l as a,v as b};
